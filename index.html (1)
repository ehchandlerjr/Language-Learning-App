<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Language Learning App</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            min-height: 100vh;
        }
        
        .header {
            background: rgba(255, 255, 255, 0.95);
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .header h1 {
            color: #4a5568;
            margin-bottom: 10px;
        }
        
        .user-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .welcome-msg {
            color: #2d3748;
            font-weight: 500;
        }
        
        .logout-btn, .switch-role-btn {
            background: #e53e3e;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .switch-role-btn {
            background: #3182ce;
            margin-right: 10px;
        }
        
        .logout-btn:hover {
            background: #c53030;
            transform: translateY(-2px);
        }
        
        .switch-role-btn:hover {
            background: #2c5aa0;
            transform: translateY(-2px);
        }
        
        .login-container {
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 20px;
            max-width: 500px;
            margin: 100px auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }
        
        .tab-buttons {
            display: flex;
            margin-bottom: 30px;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        
        .tab-btn {
            flex: 1;
            padding: 15px;
            border: none;
            background: #f7fafc;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .tab-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .tab-btn:hover:not(.active) {
            background: #edf2f7;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #4a5568;
        }
        
        input, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        input:focus, select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        .auth-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .auth-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.95);
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card h3 {
            color: #2d3748;
            margin-bottom: 15px;
            font-size: 20px;
        }
        
        .game-btn {
            width: 100%;
            padding: 15px;
            margin: 8px 0;
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .game-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.3);
        }
        
        .game-container {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            max-width: 600px;
            margin: 20px auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            text-align: center;
        }
        
        .question {
            font-size: 24px;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 20px;
        }
        
        .options {
            display: grid;
            gap: 10px;
            margin: 20px 0;
        }
        
        .option-btn {
            padding: 15px;
            background: #f7fafc;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .option-btn:hover {
            background: #edf2f7;
            border-color: #cbd5e0;
        }
        
        .option-btn.correct {
            background: #c6f6d5;
            border-color: #48bb78;
            color: #22543d;
        }
        
        .option-btn.incorrect {
            background: #fed7d7;
            border-color: #e53e3e;
            color: #742a2a;
        }
        
        .timer {
            font-size: 18px;
            font-weight: bold;
            color: #e53e3e;
            margin-bottom: 20px;
        }
        
        .score {
            font-size: 20px;
            font-weight: bold;
            color: #48bb78;
            margin-bottom: 20px;
        }
        
        .progress-bar {
            width: 100%;
            height: 10px;
            background: #e2e8f0;
            border-radius: 5px;
            margin: 20px 0;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background: linear-gradient(90deg, #48bb78, #38a169);
            transition: width 0.3s ease;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }
        
        .stat-item {
            background: rgba(255, 255, 255, 0.8);
            padding: 15px;
            border-radius: 10px;
            text-align: center;
        }
        
        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #2d3748;
        }
        
        .stat-label {
            font-size: 14px;
            color: #718096;
            margin-top: 5px;
        }
        
        .student-list {
            max-height: 400px;
            overflow-y: auto;
        }
        
        .student-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            margin: 10px 0;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            transition: all 0.3s ease;
        }
        
        .student-item:hover {
            background: rgba(255, 255, 255, 1);
            transform: translateX(5px);
        }
        
        .student-name {
            font-weight: 600;
            color: #2d3748;
        }
        
        .student-score {
            color: #48bb78;
            font-weight: bold;
        }
        
        .hidden {
            display: none;
        }
        
        .input-answer {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }
        
        .submit-btn {
            padding: 12px 30px;
            background: linear-gradient(135deg, #3182ce 0%, #2c5aa0 100%);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(49, 130, 206, 0.3);
        }
        
        .back-btn {
            background: #718096;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            cursor: pointer;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }
        
        .back-btn:hover {
            background: #4a5568;
            transform: translateY(-2px);
        }
        
        .word-list {
            max-height: 300px;
            overflow-y: auto;
            background: rgba(255, 255, 255, 0.8);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
        }
        
        .word-item {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #e2e8f0;
        }
        
        .word-item:last-child {
            border-bottom: none;
        }
        
        .difficulty-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .easy { background: #48bb78; }
        .medium { background: #ed8936; }
        .hard { background: #e53e3e; }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .user-info {
                flex-direction: column;
                align-items: flex-start;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Login/Signup Form -->
        <div id="loginContainer" class="login-container">
            <h2 style="text-align: center; margin-bottom: 30px; color: #2d3748;">Language Learning Platform</h2>
            
            <div class="tab-buttons">
                <button class="tab-btn active" onclick="switchTab('login')">Login</button>
                <button class="tab-btn" onclick="switchTab('signup')">Sign Up</button>
            </div>
            
            <form id="loginForm">
                <div class="form-group">
                    <label for="loginEmail">Email:</label>
                    <input type="email" id="loginEmail" required>
                </div>
                <div class="form-group">
                    <label for="loginPassword">Password:</label>
                    <input type="password" id="loginPassword" required>
                </div>
                <button type="submit" class="auth-btn">Login</button>
            </form>
            
            <form id="signupForm" class="hidden">
                <div class="form-group">
                    <label for="signupName">Full Name:</label>
                    <input type="text" id="signupName" required>
                </div>
                <div class="form-group">
                    <label for="signupEmail">Email:</label>
                    <input type="email" id="signupEmail" required>
                </div>
                <div class="form-group">
                    <label for="signupPassword">Password:</label>
                    <input type="password" id="signupPassword" required>
                </div>
                <div class="form-group">
                    <label for="userRole">Role:</label>
                    <select id="userRole" required>
                        <option value="student">Student</option>
                        <option value="teacher">Teacher</option>
                    </select>
                </div>
                <button type="submit" class="auth-btn">Sign Up</button>
            </form>
            
            <p style="text-align: center; margin-top: 20px; color: #718096; font-size: 14px;">
                Demo accounts:<br>
                Teacher: teacher@demo.com / password<br>
                Student: student@demo.com / password
            </p>
        </div>
        
        <!-- Main App -->
        <div id="mainApp" class="hidden">
            <div class="header">
                <h1>Language Learning Platform</h1>
                <div class="user-info">
                    <span class="welcome-msg" id="welcomeMsg">Welcome!</span>
                    <div>
                        <button class="switch-role-btn" onclick="switchRole()">Switch to <span id="roleSwitch">Teacher</span></button>
                        <button class="logout-btn" onclick="logout()">Logout</button>
                    </div>
                </div>
            </div>
            
            <!-- Student Dashboard -->
            <div id="studentDashboard" class="dashboard">
                <div class="card">
                    <h3>🎮 Practice Games</h3>
                    <button class="game-btn" onclick="startGame('flashcards')">Flashcards</button>
                    <button class="game-btn" onclick="startGame('multiple-choice')">Multiple Choice</button>
                    <button class="game-btn" onclick="startGame('typing')">Type the Translation</button>
                </div>
                
                <div class="card">
                    <h3>📊 Your Progress</h3>
                    <div class="stats">
                        <div class="stat-item">
                            <div class="stat-value" id="studentScore">0</div>
                            <div class="stat-label">Total Score</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="wordsLearned">0</div>
                            <div class="stat-label">Words Learned</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="streak">0</div>
                            <div class="stat-label">Day Streak</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="accuracy">0%</div>
                            <div class="stat-label">Accuracy</div>
                        </div>
                    </div>
                    <canvas id="progressChart" width="400" height="200"></canvas>
                </div>
                
                <div class="card">
                    <h3>🎯 Words to Review</h3>
                    <div class="word-list" id="reviewWords">
                        <!-- Words that need review will appear here -->
                    </div>
                </div>
            </div>
            
            <!-- Teacher Dashboard -->
            <div id="teacherDashboard" class="dashboard hidden">
                <div class="card">
                    <h3>👥 Class Overview</h3>
                    <div class="stats">
                        <div class="stat-item">
                            <div class="stat-value" id="totalStudents">0</div>
                            <div class="stat-label">Total Students</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="avgScore">0</div>
                            <div class="stat-label">Avg Score</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="activeToday">0</div>
                            <div class="stat-label">Active Today</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-value" id="completionRate">0%</div>
                            <div class="stat-label">Completion Rate</div>
                        </div>
                    </div>
                    <canvas id="teacherChart" width="400" height="200"></canvas>
                </div>
                
                <div class="card">
                    <h3>📚 Vocabulary Management</h3>
                    <button class="game-btn" onclick="showVocabManager()">Manage Vocabulary</button>
                    <button class="game-btn" onclick="showAnalytics()">Detailed Analytics</button>
                    <button class="game-btn" onclick="exportData()">Export Student Data</button>
                </div>
                
                <div class="card">
                    <h3>🏆 Student Rankings</h3>
                    <div class="student-list" id="studentRankings">
                        <!-- Student rankings will appear here -->
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Game Interface -->
        <div id="gameInterface" class="hidden">
            <button class="back-btn" onclick="endGame()">← Back to Dashboard</button>
            
            <div class="game-container">
                <div class="timer" id="gameTimer">Time: 30s</div>
                <div class="score" id="gameScore">Score: 0</div>
                <div class="progress-bar">
                    <div class="progress" id="gameProgress" style="width: 0%"></div>
                </div>
                
                <div id="gameContent">
                    <!-- Game content will be dynamically loaded here -->
                </div>
                
                <button id="nextBtn" class="submit-btn hidden" onclick="nextQuestion()">Next Question</button>
            </div>
        </div>
    </div>

    <script>
        // Sample vocabulary data
        const vocabulary = [
            { word: "hello", translation: "hola", difficulty: 1 },
            { word: "goodbye", translation: "adiós", difficulty: 1 },
            { word: "thank you", translation: "gracias", difficulty: 1 },
            { word: "please", translation: "por favor", difficulty: 2 },
            { word: "excuse me", translation: "disculpe", difficulty: 2 },
            { word: "how are you?", translation: "¿cómo estás?", difficulty: 2 },
            { word: "beautiful", translation: "hermoso", difficulty: 3 },
            { word: "understand", translation: "entender", difficulty: 3 },
            { word: "restaurant", translation: "restaurante", difficulty: 2 },
            { word: "hospital", translation: "hospital", difficulty: 2 },
            { word: "library", translation: "biblioteca", difficulty: 3 },
            { word: "university", translation: "universidad", difficulty: 3 }
        ];

        // User data storage
        let users = {
            'teacher@demo.com': { name: 'Demo Teacher', role: 'teacher', password: 'password' },
            'student@demo.com': { name: 'Demo Student', role: 'student', password: 'password' }
        };

        let studentProgress = {
            'student@demo.com': {
                totalScore: 150,
                wordsLearned: 8,
                streak: 3,
                accuracy: 85,
                gameHistory: [
                    { date: '2025-06-10', score: 45, type: 'flashcards' },
                    { date: '2025-06-11', score: 52, type: 'multiple-choice' },
                    { date: '2025-06-12', score: 38, type: 'typing' },
                    { date: '2025-06-13', score: 15, type: 'flashcards' }
                ],
                wordProgress: {}
            }
        };

        // Initialize word progress for spaced repetition
        vocabulary.forEach(item => {
            if (!studentProgress['student@demo.com'].wordProgress[item.word]) {
                studentProgress['student@demo.com'].wordProgress[item.word] = {
                    correct: 0,
                    incorrect: 0,
                    lastSeen: null,
                    interval: 1,
                    easeFactor: 2.5
                };
            }
        });

        let currentUser = null;
        let currentGame = null;
        let gameState = {
            score: 0,
            currentQuestion: 0,
            totalQuestions: 10,
            timeLeft: 30,
            timer: null,
            questions: []
        };

        // Authentication functions
        function switchTab(tab) {
            const loginForm = document.getElementById('loginForm');
            const signupForm = document.getElementById('signupForm');
            const loginBtn = document.querySelector('.tab-btn');
            const signupBtn = document.querySelectorAll('.tab-btn')[1];

            if (tab === 'login') {
                loginForm.classList.remove('hidden');
                signupForm.classList.add('hidden');
                loginBtn.classList.add('active');
                signupBtn.classList.remove('active');
            } else {
                loginForm.classList.add('hidden');
                signupForm.classList.remove('hidden');
                loginBtn.classList.remove('active');
                signupBtn.classList.add('active');
            }
        }

        function login(email, password) {
            const user = users[email];
            if (user && user.password === password) {
                currentUser = { ...user, email };
                showMainApp();
                return true;
            }
            return false;
        }

        function signup(name, email, password, role) {
            if (users[email]) {
                alert('User already exists!');
                return false;
            }
            
            users[email] = { name, role, password };
            if (role === 'student') {
                studentProgress[email] = {
                    totalScore: 0,
                    wordsLearned: 0,
                    streak: 0,
                    accuracy: 0,
                    gameHistory: [],
                    wordProgress: {}
                };
                vocabulary.forEach(item => {
                    studentProgress[email].wordProgress[item.word] = {
                        correct: 0,
                        incorrect: 0,
                        lastSeen: null,
                        interval: 1,
                        easeFactor: 2.5
                    };
                });
            }
            
            currentUser = { name, email, role };
            showMainApp();
            return true;
        }

        function logout() {
            currentUser = null;
            document.getElementById('loginContainer').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
            document.getElementById('gameInterface').classList.add('hidden');
        }

        function switchRole() {
            if (currentUser.role === 'student') {
                currentUser.role = 'teacher';
                document.getElementById('roleSwitch').textContent = 'Student';
            } else {
                currentUser.role = 'student';
                document.getElementById('roleSwitch').textContent = 'Teacher';
            }
            showMainApp();
        }

        function showMainApp() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('mainApp').classList.remove('hidden');
            document.getElementById('gameInterface').classList.add('hidden');
            
            document.getElementById('welcomeMsg').textContent = 
                `Welcome, ${currentUser.name}! (${currentUser.role})`;
            
            if (currentUser.role === 'student') {
                document.getElementById('studentDashboard').classList.remove('hidden');
                document.getElementById('teacherDashboard').classList.add('hidden');
                document.getElementById('roleSwitch').textContent = 'Teacher';
                updateStudentDashboard();
            } else {
                document.getElementById('studentDashboard').classList.add('hidden');
                document.getElementById('teacherDashboard').classList.remove('hidden');
                document.getElementById('roleSwitch').textContent = 'Student';
                updateTeacherDashboard();
            }
        }

        function updateStudentDashboard() {
            const progress = studentProgress[currentUser.email] || {
                totalScore: 0, wordsLearned: 0, streak: 0, accuracy: 0, gameHistory: []
            };
            
            document.getElementById('studentScore').textContent = progress.totalScore;
            document.getElementById('wordsLearned').textContent = progress.wordsLearned;
            document.getElementById('streak').textContent = progress.streak;
            document.getElementById('accuracy').textContent = progress.accuracy + '%';
            
            // Update progress chart
            updateProgressChart();
            
            // Update review words
            updateReviewWords();
        }

        function updateProgressChart() {
            const canvas = document.getElementById('progressChart');
            const ctx = canvas.getContext('2d');
            
            const progress = studentProgress[currentUser.email];
            if (!progress || !progress.gameHistory.length) return;
            
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: progress.gameHistory.map(h => h.date),
                    datasets: [{
                        label: 'Daily Score',
                        data: progress.gameHistory.map(h => h.score),
                        borderColor: '#667eea',
                        backgroundColor: 'rgba(102, 126, 234, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function updateReviewWords() {
            const reviewContainer = document.getElementById('reviewWords');
            const progress = studentProgress[currentUser.email];
            
            if (!progress) return;
            
            let reviewHTML = '';
            Object.keys(progress.wordProgress).forEach(word => {
                const wordData = progress.wordProgress[word];
                const difficulty = wordData.incorrect > wordData.correct ? 'hard' : 
                                 wordData.correct > 3 ? 'easy' : 'medium';
                
                reviewHTML += `
                    <div class="word-item">
                        <span>${word}</span>
                        <span class="difficulty-indicator ${difficulty}"></span>
                    </div>
                `;
            });
            
            reviewContainer.innerHTML = reviewHTML || '<p>No words to review yet!</p>';
        }

        function updateTeacherDashboard() {
            // Calculate class statistics
            const students = Object.keys(studentProgress);
            const totalScore = students.reduce((sum, email) => 
                sum + (studentProgress[email]?.totalScore || 0), 0);
            const avgScore = students.length ? Math.round(totalScore / students.length) : 0;
            
            document.getElementById('totalStudents').textContent = students.length;
            document.getElementById('avgScore').textContent = avgScore;
            document.getElementById('activeToday').textContent = 
                students.filter(email => {
                    const history = studentProgress[email]?.gameHistory || [];
                    return history.some(h => h.date === '2025-06-13');
                }).length;
            document.getElementById('completionRate').textContent = '75%';
            
            // Update teacher chart
            updateTeacherChart();
            
            // Update student rankings
            updateStudentRankings();
        }

        function updateTeacherChart() {
    const canvas = document.getElementById('teacherChart');
    const ctx = canvas.getContext('2d');

    const students = Object.keys(studentProgress);
    const scores = students.map(email => studentProgress[email]?.totalScore || 0);
    const names = students.map(email => users[email]?.name || email);

    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: names,
            datasets: [{
                label: 'Student Scores',
                data: scores,
                backgroundColor: 'rgba(102, 126, 234, 0.6)',
                borderColor: '#667eea',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Total Score'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Students'
                    }
                }
            }
        }
    });
}

function updateStudentRankings() {
    const rankingsContainer = document.getElementById('studentRankings');
    const students = Object.keys(studentProgress).map(email => ({
        email,
        name: users[email]?.name || email,
        score: studentProgress[email]?.totalScore || 0
    })).sort((a, b) => b.score - a.score);

    let rankingsHTML = '';
    students.forEach((student, index) => {
        rankingsHTML += `
            <div class="student-item">
                <span class="student-name">${index + 1}. ${student.name}</span>
                <span class="student-score">${student.score}</span>
            </div>
        `;
    });

    rankingsContainer.innerHTML = rankingsHTML || '<p>No student data yet!</p>';
}

// Game Logic
function startGame(type) {
    currentGame = type;
    gameState.score = 0;
    gameState.currentQuestion = 0;
    gameState.timeLeft = 30;
    gameState.questions = generateQuestions(type);

    document.getElementById('mainApp').classList.add('hidden');
    document.getElementById('gameInterface').classList.remove('hidden');
    document.getElementById('gameScore').textContent = `Score: ${gameState.score}`;
    document.getElementById('gameProgress').style.width = '0%';

    startTimer();
    loadQuestion();
}

function generateQuestions(type) {
    const progress = studentProgress[currentUser.email];
    const questions = [];
    const availableWords = vocabulary.filter(item => {
        const wordProgress = progress.wordProgress[item.word];
        const daysSinceLastSeen = wordProgress.lastSeen
            ? (new Date() - new Date(wordProgress.lastSeen)) / (1000 * 60 * 60 * 24)
            : Infinity;
        return daysSinceLastSeen >= wordProgress.interval;
    });

    const shuffled = availableWords.sort(() => Math.random() - 0.5).slice(0, gameState.totalQuestions);

    shuffled.forEach(item => {
        if (type === 'flashcards') {
            questions.push({
                word: item.word,
                translation: item.translation,
                type: 'flashcards'
            });
        } else if (type === 'multiple-choice') {
            const options = [item.translation];
            while (options.length < 4) {
                const randomWord = vocabulary[Math.floor(Math.random() * vocabulary.length)];
                if (!options.includes(randomWord.translation) && randomWord.translation !== item.translation) {
                    options.push(randomWord.translation);
                }
            }
            questions.push({
                word: item.word,
                correct: item.translation,
                options: options.sort(() => Math.random() - 0.5),
                type: 'multiple-choice'
            });
        } else if (type === 'typing') {
            questions.push({
                word: item.word,
                translation: item.translation,
                type: 'typing'
            });
        }
    });

    return questions;
}

function startTimer() {
    if (gameState.timer) clearInterval(gameState.timer);
    gameState.timeLeft = 30;
    document.getElementById('gameTimer').textContent = `Time: ${gameState.timeLeft}s`;

    gameState.timer = setInterval(() => {
        gameState.timeLeft--;
        document.getElementById('gameTimer').textContent = `Time: ${gameState.timeLeft}s`;
        if (gameState.timeLeft <= 0) {
            clearInterval(gameState.timer);
            endGame();
        }
    }, 1000);
}

function loadQuestion() {
    if (gameState.currentQuestion >= gameState.totalQuestions) {
        endGame();
        return;
    }

    const question = gameState.questions[gameState.currentQuestion];
    const gameContent = document.getElementById('gameContent');
    const nextBtn = document.getElementById('nextBtn');

    gameContent.innerHTML = '';
    nextBtn.classList.add('hidden');

    if (question.type === 'flashcards') {
        gameContent.innerHTML = `
            <div class="question">${question.word}</div>
            <button class="option-btn" onclick="revealAnswer('${question.translation}')">Show Answer</button>
        `;
    } else if (question.type === 'multiple-choice') {
        let optionsHTML = '';
        question.options.forEach(option => {
            optionsHTML += `<button class="option-btn" onclick="checkAnswer('${option}', '${question.correct}')">${option}</button>`;
        });
        gameContent.innerHTML = `
            <div class="question">${question.word}</div>
            <div class="options">${optionsHTML}</div>
        `;
    } else if (question.type === 'typing') {
        gameContent.innerHTML = `
            <div class="question">${question.word}</div>
            <input type="text" class="input-answer" id="typingInput" placeholder="Type the translation">
            <button class="submit-btn" onclick="checkTypingAnswer('${question.translation}')">Submit</button>
        `;
        document.getElementById('typingInput').focus();
    }

    document.getElementById('gameProgress').style.width = `${((gameState.currentQuestion + 1) / gameState.totalQuestions) * 100}%`;
}

function revealAnswer(translation) {
    const gameContent = document.getElementById('gameContent');
    gameContent.innerHTML = `
        <div class="question">${translation}</div>
        <button class="option-btn" onclick="markAnswer(true)">Correct</button>
        <button class="option-btn" onclick="markAnswer(false)">Incorrect</button>
    `;
}

function checkAnswer(selected, correct) {
    const isCorrect = selected === correct;
    markAnswer(isCorrect);
    const buttons = document.querySelectorAll('.option-btn');
    buttons.forEach(btn => {
        if (btn.textContent === correct) {
            btn.classList.add('correct');
        } else if (btn.textContent === selected) {
            btn.classList.add('incorrect');
        }
        btn.disabled = true;
    });
    document.getElementById('nextBtn').classList.remove('hidden');
}

function checkTypingAnswer(correct) {
    const input = document.getElementById('typingInput').value.trim().toLowerCase();
    const isCorrect = input === correct.toLowerCase();
    markAnswer(isCorrect);
    const inputField = document.getElementById('typingInput');
    inputField.classList.add(isCorrect ? 'correct' : 'incorrect');
    inputField.disabled = true;
    document.getElementById('nextBtn').classList.remove('hidden');
}

function markAnswer(isCorrect) {
    const question = gameState.questions[gameState.currentQuestion];
    const progress = studentProgress[currentUser.email].wordProgress[question.word];
    
    if (isCorrect) {
        gameState.score += 10;
        progress.correct++;
        progress.easeFactor = Math.min(progress.easeFactor + 0.1, 2.5);
    } else {
        progress.incorrect++;
        progress.easeFactor = Math.max(progress.easeFactor - 0.2, 1.3);
    }

    progress.lastSeen = new Date().toISOString();
    progress.interval = calculateInterval(progress);
    gameState.score = Math.max(0, gameState.score);
    document.getElementById('gameScore').textContent = `Score: ${gameState.score}`;
}

function calculateInterval(progress) {
    // Spaced repetition based on SuperMemo SM-2 algorithm
    if (progress.correct < 2) return 1;
    if (progress.correct === 2) return 6;
    return Math.round(progress.interval * progress.easeFactor);
}

function nextQuestion() {
    gameState.currentQuestion++;
    loadQuestion();
}

function endGame() {
    clearInterval(gameState.timer);
    const progress = studentProgress[currentUser.email];
    progress.totalScore += gameState.score;
    progress.wordsLearned = Object.values(progress.wordProgress).filter(w => w.correct >= 3).length;
    progress.accuracy = calculateAccuracy(progress);
    progress.gameHistory.push({
        date: new Date().toISOString().split('T')[0],
        score: gameState.score,
        type: currentGame
    });

    document.getElementById('gameInterface').classList.add('hidden');
    showMainApp();
}

// Calculate accuracy based on word progress
function calculateAccuracy(progress) {
    const totalAttempts = Object.values(progress.wordProgress).reduce(
        (sum, w) => sum + w.correct + w.incorrect, 0
    );
    const totalCorrect = Object.values(progress.wordProgress).reduce(
        (sum, w) => sum + w.correct, 0
    );
    return totalAttempts ? Math.round((totalCorrect / totalAttempts) * 100) : 0;
}

// Teacher Features
function showVocabManager() {
    const gameContent = document.getElementById('gameContent');
    document.getElementById('mainApp').classList.add('hidden');
    document.getElementById('gameInterface').classList.remove('hidden');
    document.getElementById('gameTimer').classList.add('hidden');
    document.getElementById('gameScore').classList.add('hidden');
    document.getElementById('gameProgress').classList.add('hidden');

    let vocabHTML = `
        <h3>Manage Vocabulary</h3>
        <div class="form-group">
            <label for="newWord">Word:</label>
            <input type="text" id="newWord">
        </div>
        <div class="form-group">
            <label for="newTranslation">Translation:</label>
            <input type="text" id="newTranslation">
        </div>
        <div class="form-group">
            <label for="newDifficulty">Difficulty:</label>
            <select id="newDifficulty">
                <option value="1">Easy</option>
                <option value="2">Medium</option>
                <option value="3">Hard</option>
            </select>
        </div>
        <button class="submit-btn" onclick="addVocabulary()">Add Word</button>
        <h4>Current Vocabulary</h4>
        <div class="word-list">
            ${vocabulary.map(item => `
                <div class="word-item">
                    <span>${item.word} → ${item.translation} (Difficulty: ${item.difficulty})</span>
                    <button onclick="removeVocabulary('${item.word}')">Remove</button>
                </div>
            `).join('')}
        </div>
    `;
    gameContent.innerHTML = vocabHTML;
}

function addVocabulary() {
    const word = document.getElementById('newWord').value.trim();
    const translation = document.getElementById('newTranslation').value.trim();
    const difficulty = parseInt(document.getElementById('newDifficulty').value);

    if (word && translation && !vocabulary.some(item => item.word === word)) {
        vocabulary.push({ word, translation, difficulty });
        Object.keys(studentProgress).forEach(email => {
            studentProgress[email].wordProgress[word] = {
                correct: 0,
                incorrect: 0,
                lastSeen: null,
                interval: 1,
                easeFactor: 2.5
            };
        });
        showVocabManager();
    } else {
        alert('Please enter a unique word and translation.');
    }
}

function removeVocabulary(word) {
    const index = vocabulary.findIndex(item => item.word === word);
    if (index !== -1) {
        vocabulary.splice(index, 1);
        Object.keys(studentProgress).forEach(email => {
            delete studentProgress[email].wordProgress[word];
        });
        showVocabManager();
    }
}

function showAnalytics() {
    const gameContent = document.getElementById('gameContent');
    document.getElementById('mainApp').classList.add('hidden');
    document.getElementById('gameInterface').classList.remove('hidden');
    document.getElementById('gameTimer').classList.add('hidden');
    document.getElementById('gameScore').classList.add('hidden');
    document.getElementById('gameProgress').classList.add('hidden');

    let analyticsHTML = '<h3>Detailed Analytics</h3>';
    const students = Object.keys(studentProgress);
    students.forEach(email => {
        const progress = studentProgress[email];
        const accuracy = calculateAccuracy(progress);
        const weakWords = Object.keys(progress.wordProgress)
            .filter(word => progress.wordProgress[word].incorrect > progress.wordProgress[word].correct)
            .map(word => `${word} (${progress.wordProgress[word].incorrect} incorrect)`);

        analyticsHTML += `
            <div class="card">
                <h4>${users[email]?.name || email}</h4>
                <p>Total Score: ${progress.totalScore}</p>
                <p>Words Learned: ${progress.wordsLearned}</p>
                <p>Accuracy: ${accuracy}%</p>
                <p>Weak Words: ${weakWords.length ? weakWords.join(', ') : 'None'}</p>
                <p>Last Active: ${progress.gameHistory.length ? progress.gameHistory[progress.gameHistory.length - 1].date : 'Never'}</p>
            </div>
        `;
    });

    gameContent.innerHTML = analyticsHTML;
}

function exportData() {
    const data = JSON.stringify(studentProgress, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'student_progress.json';
    a.click();
    URL.revokeObjectURL(url);
}

// Event Listeners
document.getElementById('loginForm').addEventListener('submit', e => {
    e.preventDefault();
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    if (login(email, password)) {
        alert('Login successful!');
    } else {
        alert('Invalid credentials!');
    }
});

document.getElementById('signupForm').addEventListener('submit', e => {
    e.preventDefault();
    const name = document.getElementById('signupName').value;
    const email = document.getElementById('signupEmail').value;
    const password = document.getElementById('signupPassword').value;
    const role = document.getElementById('userRole').value;
    if (signup(name, email, password, role)) {
        alert('Sign up successful!');
    }
});

// Initialize app
if (currentUser) {
    showMainApp();
}
</script>